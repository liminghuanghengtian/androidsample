// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    repositories {
        jcenter()
        maven {
            url 'https://maven.google.com/'
            name 'Google'
        }
        maven {
//            url uri("H:/ASProjects/MyApplication/repo")
            url uri("/repo")
        }
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:2.3.3'
        // 添加APT依赖
        classpath 'com.neenbedankt.gradle.plugins:android-apt:1.8'
        // 添加自定义插件
        classpath 'com.example.gradle.plugin:dellog:1.0.1'

        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

allprojects {
    repositories {
        jcenter()
        maven {
            url 'https://maven.google.com/'
            name 'Google'
        }
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

ext {
    COMPILE_SDK_VERSION = 26
    BUILD_TOOLS_VERSION = "26.0.1"
    APPLICATION_ID = "com.example.adaministrator.myapplication"
    MIN_SDK_VERSION = 21
    TARGET_SDK_VERSION = 26
    VERSION_CODE = 1
    VERSION_NAME = "1.0"
    SUPPORT_VERSION = "26.+"
}

//导入groovy的Json解析
import groovy.json.JsonSlurper

def getTenantVersionName(def apkName) {
    //请求的打包信息的服务器地址
    def urlString = "http://www.baidu.com?appName=${apkName}"
    def url = new URL(urlString)
    def packageInfoResult = null
    HttpURLConnection conn = (HttpURLConnection) url.openConnection()
    conn.setRequestMethod('GET')
    conn.setConnectTimeout(5000)
    int code = conn.getResponseCode()
    if (code == 200) {
        //请求成功
        InputStream is = conn.getInputStream()
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        byte[] buffer = new byte[1024]
        int len = 0
        while ((len = is.read(buffer)) != -1) {
            baos.write(buffer, 0, len)
        }
        baos.close()
        is.close()
        //转换数据
        byte[] byteArray = baos.toByteArray()
        def result = new String(byteArray)
        def JsonSlurper = new JsonSlurper()
        packageInfoResult = JsonSlurper.parseText(result)
    }
    return packageInfoResult
}

task printProps {
    doLast {
        println commandLineProjectProp
        println gradlePropertiesProp
        println systemProjectProp
        println envProjectProp
        println System.properties['system']
    }
}
